package sysproxy

import (
	"fmt"
	"syscall"
	"unsafe"
)

const (
	INTERNET_PER_CONN_FLAGS                = 1
	INTERNET_PER_CONN_PROXY_SERVER         = 2
	INTERNET_PER_CONN_PROXY_BYPASS         = 3
	INTERNET_PER_CONN_AUTOCONFIG_URL       = 4
	INTERNET_OPTION_PROXY                  = 38
	INTERNET_OPTION_SETTINGS_CHANGED       = 39
	INTERNET_OPTION_REFRESH                = 37
	INTERNET_OPTION_PER_CONNECTION_OPTION  = 75
	INTERNET_OPTION_PROXY_SETTINGS_CHANGED = 95

	PROXY_TYPE_DIRECT         = 0x00000001 // 禁用所有代理
	PROXY_TYPE_PROXY          = 0x00000002 // 启用手动代理
	PROXY_TYPE_AUTO_PROXY_URL = 0x00000004 // 启用脚本代理
	PROXY_TYPE_AUTO_DETECT    = 0x00000008 // 启用自动检测设置

)

var (
	winInet            = syscall.NewLazyDLL("wininet.dll")
	InternetSetOptionW = winInet.NewProc("InternetSetOptionW")
	InternetOpenW      = winInet.NewProc("InternetOpenW")
)

/*
	typedef struct {
		  DWORD dwOption;
		  union {
		    DWORD    dwValue;
		    LPSTR    pszValue;
		    FILETIME ftValue;
		  } Value;
	} INTERNET_PER_CONN_OPTIONA, *LPINTERNET_PER_CONN_OPTIONA;

	typedef struct _FILETIME {
		  DWORD dwLowDateTime;
		  DWORD dwHighDateTime;
		} FILETIME, *PFILETIME, *LPFILETIME;
*/
type INTERNET_PER_CONN_OPTION struct {
	dwOption uint32
	dwValue  uint64 // 注意 32位 和 64位 struct 和 union 内存对齐
}
type INTERNET_PER_CONN_OPTION_LIST struct {
	dwSize        uint32
	pszConnection *uint16
	dwOptionCount uint32
	dwOptionError uint32
	pOptions      uintptr
}

func EnableAutoProxy() error {
	options := [3]INTERNET_PER_CONN_OPTION{}
	options[0].dwOption = INTERNET_PER_CONN_FLAGS
	options[0].dwValue = PROXY_TYPE_AUTO_DETECT
	list := INTERNET_PER_CONN_OPTION_LIST{}
	list.dwSize = uint32(unsafe.Sizeof(list))
	list.pszConnection = nil
	list.dwOptionCount = 1
	list.dwOptionError = 0
	list.pOptions = uintptr(unsafe.Pointer(&options))

	return setProxy(list)
}

func DisableProxy() error {
	options := [3]INTERNET_PER_CONN_OPTION{}
	options[0].dwOption = INTERNET_PER_CONN_FLAGS
	options[0].dwValue = PROXY_TYPE_DIRECT
	list := INTERNET_PER_CONN_OPTION_LIST{}
	list.dwSize = uint32(unsafe.Sizeof(list))
	list.pszConnection = nil
	list.dwOptionCount = 1
	list.dwOptionError = 0
	list.pOptions = uintptr(unsafe.Pointer(&options))

	return setProxy(list)
}

func SetGlobalProxy(proxy string, bypass string) error {
	if len(bypass) == 0 {
		bypass = "<local>"
	}
	var count uint32 = 3
	options := [3]INTERNET_PER_CONN_OPTION{} //make([]INTERNET_PER_CONN_OPTION, count)
	options[0].dwOption = INTERNET_PER_CONN_FLAGS
	options[0].dwValue = PROXY_TYPE_PROXY
	options[1].dwOption = INTERNET_PER_CONN_PROXY_SERVER
	options[1].dwValue = uint64(uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(proxy))))
	options[2].dwOption = INTERNET_PER_CONN_PROXY_BYPASS
	options[2].dwValue = uint64(uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(bypass))))
	list := INTERNET_PER_CONN_OPTION_LIST{}
	list.dwSize = uint32(unsafe.Sizeof(list))
	list.pszConnection = nil
	list.dwOptionCount = count
	list.dwOptionError = 0
	list.pOptions = uintptr(unsafe.Pointer(&options))
	return setProxy(list)
}

func SetPacProxy(pac string) error {
	options := [3]INTERNET_PER_CONN_OPTION{}
	options[0].dwOption = INTERNET_PER_CONN_FLAGS
	options[0].dwValue = PROXY_TYPE_AUTO_PROXY_URL
	options[1].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL
	options[1].dwValue = uint64(uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(pac))))
	list := INTERNET_PER_CONN_OPTION_LIST{}
	list.dwSize = uint32(unsafe.Sizeof(list))
	list.pszConnection = nil
	list.dwOptionCount = 2
	list.dwOptionError = 0
	list.pOptions = uintptr(unsafe.Pointer(&options))

	return setProxy(list)
}

func setProxy(list INTERNET_PER_CONN_OPTION_LIST) error {
	_, _, err := InternetSetOptionW.Call(0, INTERNET_OPTION_PER_CONNECTION_OPTION, uintptr(unsafe.Pointer(&list)), uintptr(unsafe.Sizeof(list)))
	if err != nil {
		return fmt.Errorf("INTERNET_OPTION_PER_CONNECTION_OPTION Error: %s", err)
	}
	_, _, err = InternetSetOptionW.Call(0, INTERNET_OPTION_PROXY_SETTINGS_CHANGED, 0, 0)
	if err != nil {
		return fmt.Errorf("INTERNET_OPTION_PROXY_SETTINGS_CHANGED Error: %s", err)
	}
	_, _, err = InternetSetOptionW.Call(0, INTERNET_OPTION_REFRESH, 0, 0)
	if err != nil {
		return fmt.Errorf("INTERNET_OPTION_REFRESH Error: %s", err)
	}
	return nil
}
